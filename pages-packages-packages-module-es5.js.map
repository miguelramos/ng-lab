{"version":3,"sources":["webpack:///src/app/pages/packages/packages-resolver.ts","webpack:///src/app/pages/packages/packages-routing.module.ts","webpack:///src/app/pages/packages/packages-service.ts","webpack:///src/app/pages/packages/packages.component.ts","webpack:///src/app/pages/packages/packages.component.html","webpack:///src/app/pages/packages/packages.module.ts","webpack:///src/app/pages/packages/state/packages.state.ts"],"names":["PackagesResolver","packageState","route","pkgId","Number","paramMap","get","getPackage","routes","path","component","resolve","packages","PackagesRoutingModule","forChild","PackagesService","urlService","httpService","urlPackages","pipe","response","data","PackagesComponent","pkgState","configExample","lang","code","package$","packages$","PackagesModule","forFeature","PackageState","packageService","id","fetchAll","filter","pkg","setState","state","name","defaults","title","slug","logo","description","namespace","badge","href","md"],"mappings":"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","file":"pages-packages-packages-module-es5.js","sourcesContent":["import { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { PackageState } from './state/packages.state';\n\n@Injectable()\nexport class PackagesResolver implements Resolve<any> {\n  constructor(\n    private packageState: PackageState\n  ) { }\n\n  public resolve(route: ActivatedRouteSnapshot) {\n    const pkgId = Number(route.paramMap.get('id'));\n\n    return this.packageState.getPackage(pkgId);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PackagesComponent } from './packages.component';\nimport { PackagesResolver } from './packages-resolver';\n\nconst routes: Routes = [\n  {\n    path: ':id',\n    component: PackagesComponent,\n    resolve: {\n      packages: PackagesResolver\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  providers: [PackagesResolver],\n  exports: [RouterModule]\n})\nexport class PackagesRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpUrlService } from '@ng-lab/http/url';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { PackageModel } from './state/packages-model';\n\n@Injectable()\nexport class PackagesService {\n  constructor(\n    private readonly urlService: HttpUrlService,\n    private readonly httpService: HttpClient\n  ) { }\n\n  public fetchAll() {\n    const urlPackages = this.urlService.get('PACKAGES.FETCH');\n\n    return this.httpService.get<{data: PackageModel[]}>(urlPackages).pipe(\n      map(response => response.data)\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PackageState } from './state/packages.state';\nimport { Observable } from 'rxjs';\nimport { PackageModel } from './state/packages-model';\nimport { Snippet } from '../../components/code/code-snipet';\n\n@Component({\n  selector: 'ng-lab-packages',\n  templateUrl: './packages.component.html',\n  styleUrls: ['./packages.component.scss']\n})\nexport class PackagesComponent implements OnInit {\n\n  package$: Observable<PackageModel>;\n\n  configExample = Snippet({\n    lang: 'typescript',\n    code: `\n    import { ConfiguratorModule } from '@ng-lab/configurator';\n\n    const CONFIG = {\n      ENV: environment,\n      PRODUCTION: environment.production,\n      DOMAINS_API: [\n        { HOST: '', KEY: '@local' },\n        { HOST: '', KEY: '@origin', ORIGIN: true },\n        { HOST: environment.api, KEY: '@api' }\n      ],\n      ENDPOINTS: {}\n    };\n\n    @NgModule({\n      imports: [\n        ConfiguratorModule.forRoot(CONFIG),\n      ],\n      exports: [\n        ConfiguratorModule\n      ]\n    })\n    export class ApplicationProvisionModule {}\n\n    const configuratorService: ConfiguratorService = new ConfiguratorService();\n\n    const settings = {\n      one: 1,\n      setting: 2,\n      with: {\n        deep: {\n          notation: 3\n        }\n      }\n    };\n\n    configuratorService.setOption('settings', settings);\n    configuratorService.hasOption('settings.with.deep.notation');\n    `\n  });\n\n  constructor(\n    private readonly pkgState: PackageState\n  ) { }\n\n  ngOnInit(): void {\n    this.package$ = this.pkgState.packages$;\n  }\n\n}\n","<ng-container *ngIf=\"package$ | async as pkg\">\n  <div class=\"ui-banner\">\n    <ui-layout-area\n      [flexGrow]=\"0\"\n      [flexShrink]=\"0\"\n      margin=\"0 2% 0 0\"\n    >\n      <img class=\"ui-banner__logo\" [src]=\"pkg.logo\" alt=\"{{pkg.title}}\">\n    </ui-layout-area>\n    <ui-layout-area [flexGrow]=\"1\">\n      <h2>\n        {{pkg.title}}\n        <img src=\"{{pkg.badge}}?style=flat\" alt=\"\">\n      </h2>\n      <p style=\"margin-bottom: 2px;\">npm install {{pkg.namespace}}</p>\n      <p style=\"margin-top: 0;\">{{pkg.description}}</p>\n    </ui-layout-area>\n  </div>\n  <section class=\"md-card\">\n    <markdown [src]=\"pkg.md\"></markdown>\n  </section>\n</ng-container>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PackagesRoutingModule } from './packages-routing.module';\nimport { PackagesComponent } from './packages.component';\nimport { PackageState } from './state/packages.state';\nimport { NgxsModule } from '@ngxs/store';\nimport { PackagesService } from './packages-service';\nimport { LayoutModule } from '@ng-lab/layout';\nimport { MarkdownModule } from 'ngx-markdown';\n\n@NgModule({\n  declarations: [PackagesComponent],\n  providers: [PackagesService],\n  imports: [\n    CommonModule,\n    LayoutModule,\n    PackagesRoutingModule,\n    NgxsModule.forFeature([PackageState]),\n    MarkdownModule.forChild()\n  ]\n})\nexport class PackagesModule { }\n","import { action, NgxsDataRepository, StateRepository } from '@ngxs-labs/data';\nimport { Injectable } from '@angular/core';\nimport { PackageModel } from './packages-model';\nimport { State, Select } from '@ngxs/store';\nimport { PackagesService } from '../packages-service';\nimport { map, first, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@StateRepository()\n@State<PackageModel>({\n  name: 'packages',\n  defaults: {\n    id: null,\n    title: null,\n    slug: null,\n    logo: null,\n    description: null,\n    namespace: null,\n    badge: null,\n    href: null,\n    md: null\n  }\n})\n@Injectable()\nexport class PackageState extends NgxsDataRepository<PackageModel> {\n  @Select(state => state.packages)\n  public packages$: Observable<PackageModel>;\n\n  constructor(\n    private readonly packageService: PackagesService\n  ) {\n    super();\n  }\n\n  @action()\n  public getPackage(id: number) {\n    return this.packageService.fetchAll().pipe(\n      map(packages => packages.filter(pkg => pkg.id === id)),\n      tap(packages => {\n        const [ pkg ] = packages;\n\n        this.setState((state) => ({...state, ...pkg}));\n      })\n    );\n  }\n}\n"]}